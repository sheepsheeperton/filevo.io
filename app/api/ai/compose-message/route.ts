import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { requestTitle, requestItems } = await request.json();

    if (!requestTitle || !requestItems || !Array.isArray(requestItems)) {
      return NextResponse.json(
        { error: 'Invalid request data' },
        { status: 400 }
      );
    }

    // Generate content using OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are a professional property management assistant. Generate concise, professional email and SMS messages for document requests. For email, provide HTML format suitable for Resend. For SMS, keep it under 160 characters.'
          },
          {
            role: 'user',
            content: `Generate email and SMS for document request: "${requestTitle}" with documents: ${requestItems.join(', ')}`
          }
        ],
        max_tokens: 500,
        temperature: 0.7,
      }),
    });

    if (!openaiResponse.ok) {
      throw new Error('OpenAI API request failed');
    }

    const openaiData = await openaiResponse.json();
    const aiContent = openaiData.choices[0]?.message?.content;

    if (!aiContent) {
      throw new Error('No content generated by OpenAI');
    }

    // Parse the AI response to extract email and SMS content
    // The AI should return content in a structured format
    let emailContent = '';
    let smsContent = '';

    try {
      // Try to parse structured response
      const lines = aiContent.split('\n');
      let currentSection = '';
      
      for (const line of lines) {
        if (line.toLowerCase().includes('email:')) {
          currentSection = 'email';
          continue;
        } else if (line.toLowerCase().includes('sms:')) {
          currentSection = 'sms';
          continue;
        }
        
        if (currentSection === 'email') {
          emailContent += line + '\n';
        } else if (currentSection === 'sms') {
          smsContent += line + '\n';
        }
      }
      
      // Clean up the content
      emailContent = emailContent.trim();
      smsContent = smsContent.trim();
      
      // If parsing failed, use the raw content and format it
      if (!emailContent || !smsContent) {
        emailContent = `<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  <h2 style="color: #333;">Document Request: ${requestTitle}</h2>
  <p>Hello,</p>
  <p>You have received a new document request. Please upload the following documents:</p>
  <ul>
    ${requestItems.map(item => `<li>${item}</li>`).join('')}
  </ul>
  <p>You can upload these documents using the secure links provided.</p>
  <p>If you have any questions, please don't hesitate to reach out.</p>
  <p>Best regards,<br>Property Management Team</p>
</div>`;
        
        smsContent = `Document Request: ${requestTitle}. Please upload: ${requestItems.join(', ')}. Use the secure links provided. Questions? Reply to this message.`;
      }
    } catch (parseError) {
      console.error('Error parsing AI response:', parseError);
      // Fallback to structured content
      emailContent = `<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
  <h2 style="color: #333;">Document Request: ${requestTitle}</h2>
  <p>Hello,</p>
  <p>You have received a new document request. Please upload the following documents:</p>
  <ul>
    ${requestItems.map(item => `<li>${item}</li>`).join('')}
  </ul>
  <p>You can upload these documents using the secure links provided.</p>
  <p>If you have any questions, please don't hesitate to reach out.</p>
  <p>Best regards,<br>Property Management Team</p>
</div>`;
      
      smsContent = `Document Request: ${requestTitle}. Please upload: ${requestItems.join(', ')}. Use the secure links provided. Questions? Reply to this message.`;
    }

    // Generate plain text version for description field
    const plainTextDescription = `Document Request: ${requestTitle}

Hello,

You have received a new document request. Please upload the following documents:
${requestItems.map(item => `â€¢ ${item}`).join('\n')}

You can upload these documents using the secure links provided.

If you have any questions, please don't hesitate to reach out.

Best regards,
Property Management Team`;

    return NextResponse.json({
      email: emailContent,
      sms: smsContent,
      description: plainTextDescription, // Plain text for description field
    });

  } catch (error) {
    console.error('AI compose error:', error);
    return NextResponse.json(
      { error: 'Failed to generate content' },
      { status: 500 }
    );
  }
}
